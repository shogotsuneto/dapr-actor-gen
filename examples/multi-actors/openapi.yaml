openapi: 3.0.3
info:
  title: Multi-Actor API
  description: |
    Dapr Actor API specification for multiple actor types.
    
    This specification demonstrates:
    - **CounterActor**: Simple state-based counter operations
    - **BankAccountActor**: Event-sourced bank account with transaction history
    
    **Design Patterns**: This shows the contrast between:
    - State-based actors (CounterActor) - stores current state only
    - Event-sourced actors (BankAccountActor) - stores events and reconstructs state
    
    **Generated from**: This specification serves as the schema-first definition
    for generating Go interfaces and types for multiple actor types.
  version: 1.0.0
  contact:
    name: Dapr Actor Experiment
    url: https://github.com/shogotsuneto/dapr-actor-experiment
  license:
    name: MIT

servers:
  - url: http://localhost:3500/v1.0/actors
    description: Local Dapr sidecar (default configuration)

paths:
  # Counter paths
  /Counter/{actorId}/method/Get:
    get:
      summary: Get current counter value
      description: |
        Retrieves the current value of the counter for this actor instance.
        Uses state-based persistence - only current value is stored.
      parameters:
        - $ref: '#/components/parameters/ActorId'
      responses:
        '200':
          description: Current counter value
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CounterState'

  /Counter/{actorId}/method/Increment:
    post:
      summary: Increment counter by 1
      description: |
        Increases the counter value by 1 and returns the new value.
        State-based operation - overwrites previous value.
      parameters:
        - $ref: '#/components/parameters/ActorId'
      responses:
        '200':
          description: Counter incremented successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CounterState'

  /Counter/{actorId}/method/Decrement:
    post:
      summary: Decrement counter by 1
      description: |
        Decreases the counter value by 1 and returns the new value.
        State-based operation - overwrites previous value.
      parameters:
        - $ref: '#/components/parameters/ActorId'
      responses:
        '200':
          description: Counter decremented successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CounterState'

  /Counter/{actorId}/method/Set:
    post:
      summary: Set counter to specific value
      description: |
        Sets the counter to a specific value provided in the request body.
        State-based operation - completely replaces current value.
      parameters:
        - $ref: '#/components/parameters/ActorId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetValueRequest'
      responses:
        '200':
          description: Counter value set successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CounterState'

  # BankAccount paths  
  /BankAccount/{actorId}/method/CreateAccount:
    post:
      summary: Create new bank account
      description: |
        Creates a new bank account with initial details.
        Event-sourced operation - stores AccountCreated event.
      parameters:
        - $ref: '#/components/parameters/ActorId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAccountRequest'
      responses:
        '200':
          description: Account created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BankAccountState'

  /BankAccount/{actorId}/method/Deposit:
    post:
      summary: Deposit money to account
      description: |
        Deposits money to the account.
        Event-sourced operation - stores MoneyDeposited event.
      parameters:
        - $ref: '#/components/parameters/ActorId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DepositRequest'
      responses:
        '200':
          description: Money deposited successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BankAccountState'

  /BankAccount/{actorId}/method/Withdraw:
    post:
      summary: Withdraw money from account
      description: |
        Withdraws money from the account if sufficient balance exists.
        Event-sourced operation - stores MoneyWithdrawn event.
      parameters:
        - $ref: '#/components/parameters/ActorId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WithdrawRequest'
      responses:
        '200':
          description: Money withdrawn successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BankAccountState'
        '400':
          description: Insufficient funds

  /BankAccount/{actorId}/method/GetBalance:
    get:
      summary: Get current account balance
      description: |
        Gets current account balance and details.
        Event-sourced - balance calculated from event history.
      parameters:
        - $ref: '#/components/parameters/ActorId'
      responses:
        '200':
          description: Current account state
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BankAccountState'

  /BankAccount/{actorId}/method/GetHistory:
    get:
      summary: Get transaction history
      description: |
        Gets complete transaction history for the account.
        Shows the power of event sourcing - full audit trail.
      parameters:
        - $ref: '#/components/parameters/ActorId'
      responses:
        '200':
          description: Transaction history
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionHistory'

components:
  parameters:
    ActorId:
      name: actorId
      in: path
      required: true
      description: |
        Unique identifier for the actor instance. Each actor ID maintains
        independent state within its actor type.
      schema:
        type: string
        pattern: '^[a-zA-Z0-9_-]+$'
        minLength: 1
        maxLength: 50
      example: "account-123"

  schemas:
    # CounterActor schemas
    CounterState:
      type: object
      description: Current state of the counter actor (state-based)
      required:
        - value
        - status
      properties:
        value:
          type: integer
          format: int32
          description: The current counter value
          example: 42
        status:
          $ref: '#/components/schemas/CounterStatus'
        lastOperation:
          $ref: '#/components/schemas/CounterOperation'
      additionalProperties: false

    CounterStatus:
      type: string
      description: Current status of the counter
      enum:
        - active
        - paused
        - error
        - reset
      example: active

    CounterOperation:
      type: string
      description: Type of the last operation performed on the counter
      enum:
        - increment
        - decrement
        - set
        - get
        - reset
      example: increment

    SetValueRequest:
      type: object
      description: Request to set the counter to a specific value
      required:
        - value
      properties:
        value:
          type: integer
          format: int32
          description: The value to set the counter to
          minimum: -2147483648
          maximum: 2147483647
          example: 100
      additionalProperties: false

    # BankAccountActor schemas
    BankAccountState:
      type: object
      description: Current state of bank account (computed from events)
      required:
        - accountId
        - ownerName
        - balance
        - isActive
      properties:
        accountId:
          type: string
          description: Unique account identifier
          example: "account-123"
        ownerName:
          type: string
          description: Account owner name
          example: "John Doe"
        balance:
          type: number
          format: double
          description: Current account balance (computed from events)
          example: 1250.50
        isActive:
          type: boolean
          description: Whether account is active
          example: true
        createdAt:
          type: string
          format: date-time
          description: Account creation timestamp
          example: "2024-01-15T10:30:00Z"
      additionalProperties: false

    CreateAccountRequest:
      type: object
      description: Request to create a new bank account
      required:
        - ownerName
        - initialDeposit
      properties:
        ownerName:
          type: string
          description: Name of the account owner
          minLength: 1
          maxLength: 100
          example: "John Doe"
        initialDeposit:
          type: number
          format: double
          description: Initial deposit amount
          minimum: 0
          example: 100.00
      additionalProperties: false

    DepositRequest:
      type: object
      description: Request to deposit money
      required:
        - amount
        - description
      properties:
        amount:
          type: number
          format: double
          description: Amount to deposit
          minimum: 0.01
          example: 250.00
        description:
          type: string
          description: Description of the deposit
          maxLength: 200
          example: "Salary deposit"
      additionalProperties: false

    WithdrawRequest:
      type: object
      description: Request to withdraw money
      required:
        - amount
        - description
      properties:
        amount:
          type: number
          format: double
          description: Amount to withdraw
          minimum: 0.01
          example: 50.00
        description:
          type: string
          description: Description of the withdrawal
          maxLength: 200
          example: "ATM withdrawal"
      additionalProperties: false

    TransactionHistory:
      type: object
      description: Complete transaction history (event sourcing benefit)
      required:
        - accountId
        - events
      properties:
        accountId:
          type: string
          description: Account identifier
          example: "account-123"
        events:
          type: array
          description: List of all events in chronological order
          items:
            $ref: '#/components/schemas/AccountEvent'
      additionalProperties: false

    AccountEvent:
      type: object
      description: A single account event
      required:
        - eventId
        - eventSequence
        - eventType
        - timestamp
        - data
      properties:
        eventId:
          type: string
          description: Unique event identifier
          example: "evt-001"
        eventSequence:
          type: integer
          format: int64
          description: Sequence number for ordering events (uses int64 for large sequences)
          example: 1234567890123456789
        eventType:
          type: string
          description: Type of event
          enum: ["AccountCreated", "MoneyDeposited", "MoneyWithdrawn"]
          example: "MoneyDeposited"
        timestamp:
          type: string
          format: date-time
          description: When the event occurred
          example: "2024-01-15T10:30:00Z"
        data:
          type: object
          description: Event-specific data
          additionalProperties: true
          example:
            amount: 250.00
            description: "Salary deposit"
      additionalProperties: false