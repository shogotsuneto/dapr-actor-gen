package main

import (
	"context"
	"log"
	"net/http"
	"os"
	"os/signal"
	"syscall"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/go-chi/chi/v5/middleware"
	daprd "github.com/dapr/go-sdk/service/http"
{{range .Actors}}
	"{{$.ModuleName}}/{{.ActorType | ToLower}}"
{{- end}}
)

// Custom context key for middleware values (DEMONSTRATION ONLY)
// In production, consider using a more structured approach for context values
type contextKey string

const (
	RequestIDKey contextKey = "requestID"
	UserInfoKey  contextKey = "userInfo"
)

// headerLoggingMiddleware logs all HTTP headers from incoming requests
// NOTE: This middleware is for DEMONSTRATION PURPOSES ONLY
// In production, be careful about logging sensitive headers and consider privacy implications
func headerLoggingMiddleware(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		log.Printf("=== HTTP Headers for %s %s ===", r.Method, r.URL.Path)
		for name, values := range r.Header {
			for _, value := range values {
				log.Printf("Header: %s: %s", name, value)
			}
		}
		log.Printf("=== End Headers ===")
		next.ServeHTTP(w, r)
	})
}

// contextEnrichmentMiddleware adds custom values to the request context
// NOTE: This middleware is for DEMONSTRATION PURPOSES ONLY
// In production, implement proper authentication and authorization
func contextEnrichmentMiddleware(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		// Add a request ID to context
		requestID := time.Now().Format("20060102-150405.000")
		ctx := context.WithValue(r.Context(), RequestIDKey, requestID)
		
		// Add some user info to context (simulated for demonstration)
		userInfo := map[string]string{
			"user":      "example-user",
			"role":      "actor-service",
			"timestamp": time.Now().Format(time.RFC3339),
		}
		ctx = context.WithValue(ctx, UserInfoKey, userInfo)
		
		log.Printf("Context enriched with RequestID: %s", requestID)
		
		// Pass the enriched context to the next handler
		next.ServeHTTP(w, r.WithContext(ctx))
	})
}

func main() {
	// Create a Chi router with middleware (DEMONSTRATION OF CHI INTEGRATION)
	// This shows how to integrate Chi router with Dapr actors
	// The middleware below are for demonstration purposes only
	r := chi.NewRouter()
	
	// Add built-in Chi middleware (DEMONSTRATION ONLY)
	// In production, configure these based on your specific requirements
	r.Use(middleware.Logger)      // Log requests
	r.Use(middleware.Recoverer)   // Recover from panics
	r.Use(middleware.RequestID)   // Add request ID header
	r.Use(middleware.RealIP)      // Set real IP
	
	// Add our custom middleware (DEMONSTRATION ONLY)
	// In production, replace with proper authentication, authorization, etc.
	r.Use(headerLoggingMiddleware)     // Log HTTP headers
	r.Use(contextEnrichmentMiddleware) // Enrich context with custom values
	
	// Create a Dapr service with our custom Chi router
	// This demonstrates how to use Chi router instead of the default mux
	s := daprd.NewServiceWithMux(":8080", r)

	// Register all generated actors
{{range .Actors}}
	// Register {{.ActorType}} actor
	s.RegisterActorImplFactoryContext({{.ActorType | ToLower}}.NewActorFactory())
{{- end}}

	// Setup graceful shutdown
	go func() {
		// Wait for interrupt signal to gracefully shutdown
		quit := make(chan os.Signal, 1)
		signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)
		<-quit
		log.Println("Shutting down server...")
		
		// The server shutdown is handled by Dapr service
		os.Exit(0)
	}()

	// Start the service
	log.Println("Starting Dapr actor service with Chi router and custom middleware on :8080")
	log.Println("NOTE: The middleware configured below are for DEMONSTRATION PURPOSES ONLY")
	log.Println("In production, configure middleware based on your specific security and operational requirements")
	log.Println()
	log.Println("Middleware enabled:")
	log.Println("- Logger: logs all HTTP requests")
	log.Println("- Recoverer: recovers from panics")
	log.Println("- RequestID: adds X-Request-Id header")
	log.Println("- RealIP: sets real IP address")
	log.Println("- HeaderLogging: logs all HTTP headers (DEMO ONLY - avoid in production)")
	log.Println("- ContextEnrichment: adds custom values to request context (DEMO ONLY)")
	
	if err := s.Start(); err != nil && err != http.ErrServerClosed {
		log.Fatalf("Failed to start service: %v", err)
	}
}